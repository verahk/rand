% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rand_bn.R
\name{rand_bn}
\alias{rand_bn}
\title{Draw a random Bayesian network}
\usage{
rand_bn(n, d, type = "cat", use_bnlearn = TRUE, ...)
}
\arguments{
\item{n}{(integer) number of nodes}

\item{d}{(integer) expected number of neighbours}

\item{type}{(character) type of distribution.}

\item{use_bnlearn}{use \code{\link[bnlearn:bn.fit]{bnlearn::custom.fit()}} to construct the bn.fit object (implies a set of checks of the input) or hardcode such an object (with no checks).}

\item{...}{additional arguments sent to \code{\link[=rand_dist]{rand_dist()}}}
}
\value{
a \code{bnlearn::bn.fit} object
}
\description{
Draw a random DAG and a distribution over the DAG, and store the BN as a \code{bnlearn::bn.fit} object.
}
\examples{

n <- 3
dag <- matrix(0, n, n)
dag[upper.tri(dag)] <- 1


# categorical ---
# draw random DAG
set.seed(007)
dag <- rand_dag(3, 2)
dag

# draw random distrib over DAG
cpts <- rand_dist(dag, "cat", nlev = rep(3, n))

# create bn object
bn <- custom_bn(dag, cpts)

# replicate with rand_bn()
set.seed(007)
bn2 <- rand_bn(3, 2, "cat", nlev = rep(3, n))
stopifnot(all.equal(bn, bn2))

}
